{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAoBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,WACjBC,YAAW,WACaC,KAAKC,SAAW,GAEpCC,EAAAT,GAASU,OAAOC,QAAQ,uBAAwCC,OAAfT,EAAS,QAAYS,OAANR,EAAM,OAEtEK,EAAAT,GAASU,OAAOG,QAAQ,sBAAqCD,OAAfT,EAAS,QAAYS,OAANR,EAAM,M,GAEpEA,E,IA3BMU,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBACJ,IAEqBC,EAAjBF,EAAIG,cADNC,SAAYjB,EAAKe,EAALf,MAAOkB,EAAIH,EAAJG,KAAMC,EAAMJ,EAANI,OAG3B,IACEC,EAAI,EAAGC,EAAIC,OAAOtB,EAAMuB,OACxBH,GAAKD,EAAOI,MACZH,GAAK,EAAGC,GAAKC,OAAOJ,EAAKK,OAEzBzB,EAAcsB,EAAGC,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = evt.currentTarget;\n\n  for (\n    i = 1, j = Number(delay.value);\n    i <= amount.value;\n    i += 1, j += Number(step.value)\n  ) {\n    createPromise(i, j);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise(() => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      } else {\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","setTimeout","Math","random","$parcel$interopDefault","Notify","success","concat","failure","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","step","amount","i","j","Number","value"],"version":3,"file":"03-promises.7d902e5c.js.map"}